plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-android-extensions'
//    id 'com.google.gms.google-services'
    id 'kotlinx-serialization'
    id 'org.jetbrains.dokka'
}

task increaseVersionCode {
    doLast {
        def code = getVerCode()
        project.logger.debug("code >> " + code)
        File versionPropsFile = file('version.properties')
        Properties versionProps = new Properties()

        def versionCodeProperty = 'VERSION_CODE_PFM'

        if (isNbbFlavor()) {
            versionCodeProperty = 'VERSION_CODE_NBB'
        }

        try {
            versionProps.load(new FileInputStream(versionPropsFile))
            if (versionPropsFile.canWrite()) {
                versionProps[versionCodeProperty] = (code + 1).toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            }
        } catch (e) {
            logger.debug(e.getLocalizedMessage())
        }
    }
}

def getVerCode = { versionCodeProperty ->
    def code = 1
    File versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()
    try {
        if (versionPropsFile.exists()) {
            if (versionPropsFile.canRead()) {
                versionProps.load(new FileInputStream(versionPropsFile))
                code = versionProps[versionCodeProperty].toInteger()
            }
        } else {
            if (versionPropsFile.createNewFile()) {
                versionProps[versionCodeProperty] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            }
        }
    } catch (e) {
        logger.debug(e.getLocalizedMessage())
    }
    return code
}

def getConfigurationProperty = { configuration ->
    def configurationPropertyValue = ""
    File configurationPropsFile = file('configuration.properties')
    Properties configurationProps = new Properties()
    try {
        if (configurationPropsFile.exists() && configurationPropsFile.canRead()) {
            configurationProps.load(new FileInputStream(configurationPropsFile))
            configurationPropertyValue = configurationProps[configuration].toString()
        }
    } catch (e) {
        logger.debug(e.getLocalizedMessage())
    }
    return configurationPropertyValue
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    ndkVersion "21.3.6528147"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_TOOLCHAIN=clang", "-DANDROID_STL=c++_static"
                cppFlags "-fexceptions  -std=c++11"
            }
        }

    }

    buildFeatures {
        dataBinding true
    }

    signingConfigs {

        debug {
            storeFile file("key/keystore")
            storePassword 'ywkrzkxu2na9934z'
            keyAlias 'pfm-key'
            keyPassword 'rbe73j9925pw9p6w'
        }

        release {
            storeFile file('key/sdk-sca')
            storePassword 'sca@Sdkk2021'
            keyAlias 'tgScaSdk'
            keyPassword 'sca@Sdkk2'
        }
    }


    flavorDimensions "default"
    productFlavors {

        demobank {
            dimension "default"
            versionName "1.0"
            ext {
                bankId = "HEADER_BANK_ID_REDBANK"

                miraclProjectId = [debug: "MIRACL_PROJECT_ID_DEMO_DEV", release: "MIRACL_PROJECT_ID_DEMO_PROD", develop: "MIRACL_PROJECT_ID_DEMO_DEV"]
                miraclClientId = [debug: "MIRACL_CLIENT_ID_DEMO_DEV", release: "MIRACL_CLIENT_ID_DEMO_PROD", develop: "MIRACL_CLIENT_ID_DEMO_DEV"]
            }
        }

        kfh {
            dimension "default"
            versionName "1.0"
            ext {
                bankId = "HEADER_BANK_ID_KFH"

                miraclProjectId = [debug: "MIRACL_PROJECT_ID_KFH_DEV", release: "MIRACL_PROJECT_ID_KFH_PROD", develop: "MIRACL_PROJECT_ID_KFH_DEV"]
                miraclClientId = [debug: "MIRACL_CLIENT_ID_KFH_DEV", release: "MIRACL_CLIENT_ID_KFH_PROD", develop: "MIRACL_CLIENT_ID_KFH_DEV"]
            }
        }

        nbb {
            dimension "default"
            versionName "1.0"
            ext {
                bankId = "HEADER_BANK_ID_NBB"

                miraclProjectId = [debug: "MIRACL_PROJECT_ID_NBB_DEV", release: "MIRACL_PROJECT_ID_NBB_PROD", develop: "MIRACL_PROJECT_ID_NBB_DEV"]
                miraclClientId = [debug: "MIRACL_CLIENT_ID_NBB_DEV", release: "MIRACL_CLIENT_ID_NBB_PROD", develop: "MIRACL_CLIENT_ID_NBB_DEV"]
            }
        }

        ithmaar {
            dimension "default"
            versionName "1.0"
            ext {
                bankId = "HEADER_BANK_ID_ITHMAAR"

                miraclProjectId = [debug: "MIRACL_PROJECT_ID_ITHMAAR_DEV", release: "MIRACL_PROJECT_ID_ITHMAAR_PROD", develop: "MIRACL_PROJECT_ID_ITHMAAR_DEV"]
                miraclClientId = [debug: "MIRACL_CLIENT_ID_ITHMAAR_DEV", release: "MIRACL_CLIENT_ID_ITHMAAR_PROD", develop: "MIRACL_CLIENT_ID_ITHMAAR_DEV"]
            }
        }

        khcb {
            dimension "default"
            versionName "1.0"
            ext {
                bankId = "HEADER_BANK_ID_KHCB"

                miraclProjectId = [debug: "MIRACL_PROJECT_ID_KHCB_DEV", release: "MIRACL_PROJECT_ID_KHCB_PROD", develop: "MIRACL_PROJECT_ID_KHCB_DEV"]
                miraclClientId = [debug: "MIRACL_CLIENT_ID_KHCB_DEV", release: "MIRACL_CLIENT_ID_KHCB_PROD", develop: "MIRACL_CLIENT_ID_KHCB_DEV"]
            }
        }

        nbk {
            dimension "default"
            versionName "1.0"
            ext {
                bankId = "HEADER_BANK_ID_NBK"

                miraclProjectId = [debug: "MIRACL_PROJECT_ID_NBK_DEV", release: "MIRACL_PROJECT_ID_NBK_PROD", develop: "MIRACL_PROJECT_ID_NBK_DEV"]
                miraclClientId = [debug: "MIRACL_CLIENT_ID_NBK_DEV", release: "MIRACL_CLIENT_ID_NBK_PROD", develop: "MIRACL_CLIENT_ID_NBK_DEV"]
            }
        }

        abb {
            dimension "default"
            versionName "1.0"
            ext {
                bankId = "HEADER_BANK_ID_ABB"

                miraclProjectId = [debug: "MIRACL_PROJECT_ID_ABB_DEV", release: "MIRACL_PROJECT_ID_ABB_PROD", develop: "MIRACL_PROJECT_ID_ABB_DEV"]
                miraclClientId = [debug: "MIRACL_CLIENT_ID_ABB_DEV", release: "MIRACL_CLIENT_ID_ABB_PROD", develop: "MIRACL_CLIENT_ID_ABB_DEV"]
            }
        }

        cl {
            dimension "default"
            versionName "1.0"
            ext {
                bankId = "HEADER_BANK_ID_CL"

                miraclProjectId = [debug: "MIRACL_PROJECT_ID_CL_DEV", release: "MIRACL_PROJECT_ID_CL_PROD", develop: "MIRACL_PROJECT_ID_CL_DEV"]
                miraclClientId = [debug: "MIRACL_CLIENT_ID_CL_DEV", release: "MIRACL_CLIENT_ID_CL_PROD", develop: "MIRACL_CLIENT_ID_CL_DEV"]
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            buildConfigField "String", "BASE_URL", getConfigurationProperty("BASE_URL_DEV")
        }

        develop {
            signingConfig signingConfigs.debug
            debuggable true
            buildConfigField "String", "BASE_URL", getConfigurationProperty("BASE_URL_STAGE")
        }

        release {
            signingConfig signingConfigs.release
//            commented because we might not need signing for library
//            productFlavors.demobank.signingConfig signingConfigs.release
//            productFlavors.nbb.signingConfig signingConfigs.nbbRelease
            buildConfigField "String", "BASE_URL", getConfigurationProperty("BASE_URL_PROD")

            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            def buildType = variant.buildType.name
            def flavor = variant.productFlavors[0]
            def versionCode = getVerCode(flavor.name)
            outputFileName = "tg-bobf-sdk-${flavor.name}-${buildType}-${versionCode}.aar"
            variant.buildConfigField 'int', 'VERSION_CODE', versionCode.toString()
            variant.buildConfigField "String", "HEADER_BANK_ID", getConfigurationProperty("${flavor.ext.bankId}")

            variant.buildConfigField "String", "MIRACL_PROJECT_ID", getConfigurationProperty("${flavor.ext.miraclProjectId[variant.buildType.name]}")
            variant.buildConfigField "String", "MIRACL_CLIENT_ID", getConfigurationProperty("${flavor.ext.miraclClientId[variant.buildType.name]}")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    tasks.named("dokkaGfm") {
        outputDirectory.set(new File(rootProject.buildDir, "documentation"))
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api 'androidx.core:core-ktx:1.3.2'
    api 'androidx.appcompat:appcompat:1.2.0'
    api 'com.google.android.material:material:1.3.0'
    api 'androidx.constraintlayout:constraintlayout:2.0.4'
    api 'androidx.recyclerview:recyclerview:1.1.0'

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Lifecycle
    def lifecycle_version = "2.3.0"
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-extensions:2.2.0"
    api "androidx.paging:paging-runtime-ktx:2.1.2"

    //Kotlin Coroutines
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'

    // Navigation
    api "androidx.navigation:navigation-fragment-ktx:$nav_version"
    api "androidx.navigation:navigation-ui-ktx:$nav_version"
    api "androidx.fragment:fragment-ktx:1.3.1"

    // Biometric
    def biometric_version = '1.1.0'
    api "androidx.biometric:biometric:$biometric_version"

    // JSON
    testImplementation 'org.json:json:20200518'
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Room Database
    api 'androidx.room:room-runtime:2.2.5'
    api "androidx.room:room-ktx:2.2.5"
    kapt 'androidx.room:room-compiler:2.2.5'

    // Database encrypting
    api "net.zetetic:android-database-sqlcipher:4.3.0"

    // Retrofit Okhttp
    def retrofit_version = '2.9.0'
    def okhttp_interceptor_version = '4.7.2'
    api "com.squareup.retrofit2:retrofit:$retrofit_version"
    api "com.squareup.retrofit2:converter-gson:$retrofit_version"
    api "com.squareup.okhttp3:logging-interceptor:$okhttp_interceptor_version"

    // Firebase
    implementation 'com.google.firebase:firebase-messaging:21.0.1'

    api 'com.jakewharton.timber:timber:4.7.1'
}